import numpy as np
from scipy.signal import place_poles
import wis_2_2_utilities as util
import wis_2_2_systems as systems
import matplotlib.pyplot as plt

# Timestep instellen
timestep = 2e-3

d = 0.02  # Diameter of breedte
rho = 700  # Dichtheid
m = rho*d*0.6*d  # Massa (verondersteld met l = 0.6)
g = 9.81
Icm = (1 / 12)*rho * d**2 * 0.6 *(d**2 + 0.6**2)
I = 1/12 * rho * d**4 * 0.6 + 1/3 * rho * d**2 *0.6**3

# Functie om A, B matrices en de gain matrix K te berekenen voor een gegeven lengte
def calculate_A_B_and_K(l, desired_poles):
    # Bereken matrices A en B
    M1 = np.array([
        [1, 0, 0, 0],
        [0, (3/2)*m*l**2+I, 0, (1/2)*m*l**2],
        [0, 0, 1, 0],
        [0, (3/4)*m*l**2+Icm, 0, (1/4)*m*l**2+Icm]
    ])

    M2 = np.array([
        [0, 1, 0, 0],
        [(3/2)*m*g*l, 0, 0, 0],
        [0, 0, 0, 1],
        [(1/2)*m*g*l, 0, (1/2)*m*g*l, 0]
    ])

    M3 = np.array([
        [0],
        [1],
        [0],
        [0]
    ])

    # Gebruik matrixvermenigvuldiging om A en B te berekenen
    A = np.linalg.inv(M1) @ M2
    B = np.linalg.inv(M1) @ M3

    # Bereken de gain matrix K via pole placement
    place_result = place_poles(A, B, desired_poles)
    K = place_result.gain_matrix
    return A, B, K

# Functie om het systeem te simuleren en de kosten te berekenen
def simulate_system(l, desired_poles):
    # Bereken A, B en de gain matrix K
    A, B, K = calculate_A_B_and_K(l, desired_poles)

    # Simulatiemodel
    model = systems.stacked_inverted_pendulum(num_pendulum=2, pendulum_length=l)

    # Maak de Pole-Placement controller aan
    control = pp_controller(A, B, desired_poles)

    # Simulatie-instellingen
    simulation = util.simulation(model=model, timestep=timestep)
    simulation.setCost()
    simulation.max_duration = 3  # Simulatieduur in seconden
    simulation.GIF_toggle = False  # Zet GIF-creatie uit

    # Variabele om kosten bij te houden
    total_cost = 0

    # Simulatie loop
    while simulation.vis.Run():
        if simulation.time < simulation.max_duration:
            simulation.step()
            observe = simulation.observe()
            u = control.feedBack(observe)
            simulation.control(u)
            simulation.log()

            # Bereken kosten: u^2 * timestep (converteer u naar float)
            total_cost += (float(u) ** 2) * timestep

            simulation.refreshTime()
        else:
            print('Ending visualisation...')
            simulation.vis.GetDevice().closeDevice()

    # Data schrijven en kosten tonen
    simulation.writeData()
    return total_cost, K

# Pole-Placement Controller
class pp_controller():
    def __init__(self, A, B, desired_poles):
        # Bereken K met pole placement
        place_result = place_poles(A, B, desired_poles)
        self.matrix_gain = place_result.gain_matrix

    def feedBack(self, observe):
        # Feedback wet: u = -Kx
        u = -self.matrix_gain @ observe
        return u

def main():
    
    best_poles = None
    best_K = None
    best_cost = float('inf')
    
    # Voor elke lengte, de gewenste polen variÃ«ren
    for length in lengths:
        # Variabele gewenste polen 
      desired_poles_variation = np.linspace(-0.1, -6, 18)  # zorg dat de waarde aan het eind correct wordt verwerkt onderaan.

        # Test de verschillende gewenste polen voor deze lengte
        for i in range(len(desired_poles_variation)):
            # Maak voor elke lengte polen met verschillende waarden
            desired_poles = [desired_poles_variation[i] + 0.5, desired_poles_variation[i], desired_poles_variation[i] - 0.5, desired_poles_variation[i] - 1]

            # Simuleer systeem
            total_cost, K = simulate_system(length, desired_poles)

            # Vergelijk de kosten en sla de beste op
            if total_cost < best_cost:
                best_cost = total_cost
                best_poles = desired_poles
                best_K = K

            # Bewaar de kosten voor elke lengte en set polen
            total_costs.append(total_cost)

            # Print de veranderende gegevens
            print(f"Lengte: {length:.2f} m")
            print(f"Gegeven polen: {desired_poles}")
            print(f"Totale kosten: {total_cost:.4f}")
            print(f"Pole-Placement matrix K: {K}")
            print("-----")

    # Print de beste resultaten
    print(f"Beste gewenste polen: {best_poles}")
    print(f"Totale kosten: {best_cost:.4f}")
    print(f"Bijbehorende Pole-Placement matrix K: {best_K}")
    
# Lijst van lengtes (van 0.6 naar kleiner)
lengths = np.linspace(0.6, 0.1, 10)  # Verander lengte van 0.6 m tot 0.1 m
total_costs = []   
lengthss = []

if __name__ == "__main__":
    main()
#het ervoor zorgen dat de x en y arrays even lang zijn.    
for i in range(len(lengths)):
  for j in range(18): #de waarde hier moet hetzelfde zijn als hierboven.
        lengthss.append(lengths[i])
plt.ylim(0, 0.02)
plt.scatter(lengthss, total_costs, marker='o')
plt.xlabel('Lengte van de pendulumarm (m)')
plt.ylabel('Totale kosten (integraal van u^2)')
plt.title('Effect van lengte en pole-placement op de totale kosten van de input')
plt.grid(True) 
plt.show()
